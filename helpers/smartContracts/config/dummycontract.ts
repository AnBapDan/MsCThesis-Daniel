import { AccountId, Client, ContractCreateFlow, ContractFunctionParameters, PrivateKey } from '@hashgraph/sdk'

async function main() {
    const mirror = "10.255.33.18:5600"
    const node = { "10.255.33.18:50211": new AccountId(3) };
    const contractBytecode = {
        "bytecode": "0x60806040526005805461ffff1916905534801561001b57600080fd5b50600080546001600160a01b03191633179055610c1c8061003d6000396000f3fe60806040526004361061007b5760003560e01c80638ad3a2981161004e5780638ad3a298146100ea5780638da5cb5b1461010a578063a55a19b114610147578063c3b125ee1461016957600080fd5b80631f7b63241461008057806324600fc3146100a25780635ace3059146100b757806370c9832e146100d7575b600080fd5b34801561008c57600080fd5b506100a061009b36600461090e565b610189565b005b3480156100ae57600080fd5b506100a06101dc565b3480156100c357600080fd5b506100a06100d236600461097c565b61023d565b6100a06100e53660046109fa565b6104f8565b3480156100f657600080fd5b506100a0610105366004610a43565b6106a8565b34801561011657600080fd5b5060005461012a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015357600080fd5b5061015c61073d565b60405161013e9190610b08565b34801561017557600080fd5b506100a061018436600461090e565b610867565b6000546001600160a01b031633146101bb57604051633733be5960e21b81523360048201526024015b60405180910390fd5b6001600160a01b03166000908152600460205260409020805460ff19169055565b3360009081526004602052604090205460ff166101f857600080fd5b33600081815260036020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015610239573d6000803e3d6000fd5b5050565b6000546001600160a01b0316331461026a57604051633733be5960e21b81523360048201526024016101b2565b60005b61ffff81168411156103a75760006001600087878561ffff1681811061029557610295610b4c565b90506020020160208101906102aa9190610b62565b61ffff908116825260208083019390935260409182016000908120835160608101855281548082526001808401546001600160a01b0390811698840198909852600290930154909616948101949094529294509089908990871681811061031357610313610b4c565b90506020020160208101906103289190610b62565b61ffff168152602080820192909252604090810160009081208181556001810180546001600160a01b0319908116909155600290910180549091169055848201516001600160a01b0316815260039092528120805483929061038b908490610b93565b925050819055505050808061039f90610bac565b91505061026d565b5060005b61ffff81168211156104f15760006001600085858561ffff168181106103d3576103d3610b4c565b90506020020160208101906103e89190610b62565b61ffff908116825260208083019390935260409182016000908120835160608101855281548082526001808401546001600160a01b0390811698840198909852600290930154909616948101949094529294509087908790871681811061045157610451610b4c565b90506020020160208101906104669190610b62565b61ffff168152602080820192909252604090810160009081208181556001810180546001600160a01b03199081169091556002909101805490911690559184015190516001600160a01b03909116916108fc841502918491818181858888f193505050501580156104db573d6000803e3d6000fd5b50505080806104e990610bac565b9150506103ab565b5050505050565b6001600160a01b03821660009081526004602052604090205460ff16801561051f57503415155b61052857600080fd5b60055460ff16156105995760405162461bcd60e51b815260206004820152603560248201527f43616e6e6f74206973737565207061796d656e74207768696c6520612072657460448201527472696576616c20697320696e2070726f677265737360581b60648201526084016101b2565b600554610100900460ff16156105f15760405162461bcd60e51b815260206004820152601b60248201527f50656e64696e672069732063757272656e746c79206c6f636b6564000000000060448201526064016101b2565b6005805461ff0019908116610100178255604080516060810182523481523360208083019182526001600160a01b0397881683850190815261ffff90971660008181526001928390529485209351845591518382018054918a166001600160a01b0319928316179055965160029384018054919099169716969096179096558054948501815590527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909201929092558154169055565b6000546001600160a01b031633146106d557604051633733be5960e21b81523360048201526024016101b2565b60005b8151811015610239576001600460008484815181106106f9576106f9610b4c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061073581610bcd565b9150506106d8565b6000546060906001600160a01b0316331461076d57604051633733be5960e21b81523360048201526024016101b2565b60055460ff16156107e65760405162461bcd60e51b815260206004820152603e60248201527f43616e6e6f742072657472696576652070656e64696e67207768696c6520616e60448201527f6f746865722072657472696576616c20697320696e2070726f6772657373000060648201526084016101b2565b6005805461ffff191661010117905560028054604080516020808402820181019092528281526000939092909183018282801561084257602002820191906000526020600020905b81548152602001906001019080831161082e575b505050505090506002600061085791906108b8565b6005805461ffff19169055905090565b6000546001600160a01b0316331461089457604051633733be5960e21b81523360048201526024016101b2565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b50805460008255906000526020600020908101906108d691906108d9565b50565b5b808211156108ee57600081556001016108da565b5090565b80356001600160a01b038116811461090957600080fd5b919050565b60006020828403121561092057600080fd5b610929826108f2565b9392505050565b60008083601f84011261094257600080fd5b50813567ffffffffffffffff81111561095a57600080fd5b6020830191508360208260051b850101111561097557600080fd5b9250929050565b6000806000806040858703121561099257600080fd5b843567ffffffffffffffff808211156109aa57600080fd5b6109b688838901610930565b909650945060208701359150808211156109cf57600080fd5b506109dc87828801610930565b95989497509550505050565b803561ffff8116811461090957600080fd5b60008060408385031215610a0d57600080fd5b610a16836108f2565b9150610a24602084016109e8565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610a5657600080fd5b823567ffffffffffffffff80821115610a6e57600080fd5b818501915085601f830112610a8257600080fd5b813581811115610a9457610a94610a2d565b8060051b604051601f19603f83011681018181108582111715610ab957610ab9610a2d565b604052918252848201925083810185019188831115610ad757600080fd5b938501935b82851015610afc57610aed856108f2565b84529385019392850192610adc565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610b4057835183529284019291840191600101610b24565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610b7457600080fd5b610929826109e8565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ba657610ba6610b7d565b92915050565b600061ffff808316818103610bc357610bc3610b7d565b6001019392505050565b600060018201610bdf57610bdf610b7d565b506001019056fea2646970667358221220e6d62b76899b6144d20d2de6af18f3af5759b4d25f44864ffa31dd464d19805a64736f6c63430008130033"
    }

    let manager = Client.forNetwork(node).setMirrorNetwork(mirror);

    manager.setOperator(
        AccountId.fromString("0.0.2"),
        PrivateKey.fromString(
          "302e020100300506032b65700422042091132178e72057a1d7528025956fe39b0b847f200ab59b2fdd367017f3087137"
        )

    );

   const contract = new ContractCreateFlow().setBytecode(contractBytecode.bytecode).setGas(10_000_000).setConstructorParameters(new ContractFunctionParameters());
   
   const txResponse = await contract.execute(manager);
   const receipt = await txResponse.getReceipt(manager)
   console.log(receipt.contractId)
}
main()